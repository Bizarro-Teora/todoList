{"version":3,"sources":["dataStructure/page.tsx","components/title.tsx","pages/firstPage.tsx","pages/sign_up.tsx","components/emailANDpassword.tsx","components/error.tsx","pages/signIn.tsx","components/newTask.tsx","pages/dash_board.tsx","pages/list.tsx","components/menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","Title","title","color","fontSize","id","mb","FirstPage","onChange","buttons","SignUp","SignIn","centerContent","spacing","map","b","i","colorScheme","onClick","CustomTextInput","props","useField","field","meta","type","label","name","placeholder","className","touched","error","CustomCheckBox","changePage","initialValues","firstName","lastName","email","password","acceptedTerms","validationSchema","Yup","min","max","required","matches","oneOf","onSubmit","values","setSubmitting","resetForm","setTimeout","newUser","fName","lName","pssw","lists","list","localStorage","setItem","JSON","stringify","DashBoard","console","log","isSubmitting","EmailANDpassword","state","checkF","setErrorF","checkPass","error_","isInvalid","m","pointerEvents","children","AtSign","event","user","target","value","Lock","pw","document","querySelector","removeEventListener","enter","addEventListener","data","e","key","clearTimeout","getElementById","focus","Error","message","which","useState","setstate","setError","mt","login","check","allGood","getItem","parse","NewTask","alignSelf","Edit","Dashboard","newItemField","setNewItemField","newItem","setNewItem","Object","keys","allItems","setAllItems","addText","setAddText","visibility","aux","concat","List","style","width","backgroundColor","borderRadius","item","margin","Delete","aux1","slice","aux2","length","listNameOld","listName","setListName","option","setOption","ml","size","saveList","draggable","isChecked","defaultIsChecked","borderColor","auxCheck","items","push","Menu","text","page","App","whichPage","currentPage","menu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.461cfe93.chunk.js","sourcesContent":["export enum Page {\r\n    FirstPage = \"First Page\",\r\n    SignUp = \"Sign Up\",\r\n    SignIn = \"Sign In\",\r\n    DashBoard = \"Dashboard\",\r\n    List = \"List\",\r\n}","import {Box} from \"@chakra-ui/react\";\r\n\r\ninterface title {\r\n    title:string,\r\n}\r\nconst Title:React.FC<title> = ({title}) => {\r\n  return (\r\n    <>    \r\n        <Box color='#3182ce' fontSize=\"40px\" id={title} mb={'20px'}>\r\n          {title}\r\n        </Box>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default Title;","import { Button, HStack, Container } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\n\r\ninterface firstPage {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst FirstPage:React.FC<firstPage> = ({title, onChange}) => {\r\n    const buttons = [Page.SignUp, Page.SignIn];\r\n\r\n    \r\n\r\n    return (\r\n        <>  \r\n            <Title title={title}/>\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n            {buttons.map((b, i) => \r\n                <Button key={i} colorScheme=\"blue\" onClick={() => onChange(b)}>\r\n                    {b}\r\n                </Button>)}            \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FirstPage;","import {Formik, \r\n        useField, \r\n        Form,\r\n        FieldHookConfig}  from 'formik';\r\nimport {Button, \r\n        Input,\r\n        Container, \r\n        Checkbox,\r\n        } from \"@chakra-ui/react\";\r\nimport * as Yup from 'yup';\r\nimport Title from  \"../components/title\";\r\nimport '../style/field.css';\r\nimport {Page} from  \"../dataStructure/page\";\r\n\r\n\r\n\r\n\r\ntype baseTextFieldProps = FieldHookConfig<string> & {\r\n\tlabel: string\r\n};\r\n\r\nconst CustomTextInput:React.FC<baseTextFieldProps> = (props) => {\r\n\tconst [field, meta, helpers] = useField(props);\r\n\tconst {label, name, type, placeholder} = props\r\n\r\n\r\n    return (\r\n        <>\r\n            \r\n            <Input className='text-input' {...field} type={type} placeholder={placeholder}/>\r\n            {meta.touched && meta.error?\r\n            (<div className='error'>{meta.error}</div>) : null}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst CustomCheckBox:React.FC<baseTextFieldProps> = (props) => {\r\n\tconst [field, meta, helpers] = useField(props);\r\n\tconst {label, name, type } = props\r\n\r\n\r\n    return (\r\n        <>\r\n            <label >\r\n            <Checkbox type='checkbox' {...field} className='checkbox'/>\r\n            {label}\r\n            </label>\r\n            {meta.touched && meta.error?\r\n            (<div className='error'>{meta.error}</div>) : null}\r\n        </>\r\n    )\r\n\r\n}\r\ninterface signUp {\r\n    changePage:(page: Page) => void,\r\n}\r\n\r\n\r\nconst  SignUp: React.FC<signUp> = ({changePage}) => {\r\n    return (\r\n        <>\r\n        <Formik \r\n        initialValues={{\r\n            firstName:'',\r\n            lastName:'',\r\n            email:'',\r\n            password:'',\r\n            acceptedTerms: false,\r\n        }}\r\n        validationSchema={Yup.object({\r\n            firstName: Yup.string()\r\n                .min(3, 'Must be at least 3 characters long.')\r\n                .max(15, 'Must be 15 characters or less.')\r\n                .required('Required'),\r\n            lastName: Yup.string()\r\n                .min(3, 'Must be at least 3 characters long.')\r\n                .max(15, 'Must be 15 characters or less.')\r\n                .required('Required'),\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be at least 8 characters long.')   \r\n                .matches(\r\n                    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                    \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n                  )           \r\n                .required('Required'),\r\n            acceptedTerms: Yup.boolean()\r\n                .oneOf([true], 'You must accept the terms and conditions.')\r\n                .required('Required')\r\n            \r\n\r\n        })}\r\n        onSubmit={(values, {setSubmitting, resetForm}) => {\r\n            setTimeout(()=> {\r\n                const newUser = {\r\n                    fName: values.firstName,\r\n                    lName: values.lastName,\r\n                    pssw: values.password,\r\n                    lists: {},\r\n                    list: '',\r\n                }\r\n                localStorage.setItem(values.email, JSON.stringify(newUser));\r\n                localStorage.setItem('email', values.email);\r\n                changePage(Page.DashBoard);\r\n\r\n                console.log(values);\r\n                console.log(typeof values);\r\n                resetForm();\r\n                setSubmitting(false);\r\n            }, 3000);\r\n        }}\r\n        >\r\n\r\n            {props => (\r\n\r\n                <Form>\r\n                    <Container centerContent={true}>\r\n                    <Title title='Sign Up'/>\r\n                    <CustomTextInput label='First Name' name='firstName' type='text' placeholder='First Name'/>                    \r\n                    <CustomTextInput label='Last Name' name='lastName' type='text' placeholder='Last Name'/>                    \r\n                    <CustomTextInput label='E-mail' name='email' type='text' placeholder='example@email.com'/>                 \r\n                    <CustomTextInput label='Password' name='password' type='password' placeholder='********'/>\r\n                    <CustomCheckBox name='acceptedTerms' label='I accept the terms and conditions.'/>\r\n                    <Button type='submit' colorScheme='blue'> {props.isSubmitting? 'Loading...':'Create Account'}</Button>\r\n                    </Container>\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n","import { Input, InputGroup, InputLeftElement,\r\n    FormControl,} from \"@chakra-ui/react\";\r\nimport {AtSignIcon, LockIcon} from \"@chakra-ui/icons\";\r\n\r\n\r\ninterface  emailANDpassword{\r\n    onChange: any,\r\n    checkF?: any,\r\n    setErrorF?: any,\r\n    error_?: number,\r\n    state: any,\r\n    checkPass: boolean,\r\n}\r\n\r\nconst EmailANDpassword:React.FC<emailANDpassword> = ({onChange, state, checkF, setErrorF, checkPass, error_}) => {\r\n    return (\r\n      <>  \r\n        <FormControl  isInvalid={(error_ !== 0 && error_ as number%13 === 0) || error_ === 1 || error_ ===4 || error_ ===5}>            \r\n        \r\n        <InputGroup m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<AtSignIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"email\" id=\"email\" placeholder=\"e-mail\" onChange={event => {\r\n                                        let user = state;\r\n                                        user.email = event.target.value as string;\r\n                                        onChange(user);\r\n                                        \r\n                                      }}/>\r\n        </InputGroup>\r\n        </FormControl>  \r\n\r\n        <FormControl   isInvalid={error_ === 2 || error_ === 6}>            \r\n        \r\n        <InputGroup m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<LockIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"password\" id=\"password\" placeholder=\"password\" onChange={event => {\r\n                                        const pw = document.querySelector('#password') as Element;\r\n                                        pw.removeEventListener('keypress', enter);\r\n                                        pw.addEventListener('keypress', enter);\r\n                                        let user = state;\r\n                                        user.data.pssw = event.target.value as string;\r\n                                        onChange(user);\r\n                                        if(checkPass)\r\n                                            checkF(user, setErrorF);\r\n                                      }}/>\r\n        </InputGroup>\r\n        </FormControl>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default EmailANDpassword\r\n\r\nconst enter = (e:Event) => {\r\n  \r\n    if((e as KeyboardEvent).key === 'Enter'){\r\n    clearTimeout();\r\n    setTimeout(() => {\r\n        if (document.getElementById(\"submit\") !== null)\r\n            (document.getElementById(\"submit\") as HTMLElement).focus();\r\n    }\r\n    \r\n    , 100); \r\n    }\r\n  \r\n    \r\n  }","import { Box} from \"@chakra-ui/react\";\r\n\r\n\r\ninterface  errorInterface{\r\n    which: number,\r\n}\r\n\r\nconst Error : React.FC<errorInterface> = ({which}) => {\r\n    let message;\r\n    switch(which) {\r\n        case 1: message = 'This email is already linked to an account';\r\n            break;\r\n        case 2: message = 'The password must have at least 8 characters.';\r\n            break;\r\n        case 7: case 11: case 13: case 7*11: case 11*13: case 13*7: case 7*11*13:\r\n            message = 'All fields are mandatory!';\r\n            break;\r\n        case 4: message = \"That's not a valid email address.\";\r\n            break;\r\n        case 5: message = \"This email is not linked to any account. Please, try again.\";\r\n            break;\r\n        case 6: message = \"The password does not match. Please, try again.\";\r\n            break;\r\n        default: message = '';\r\n    }\r\n    \r\n    return (\r\n    <Box color='red'>  \r\n        {message}\r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default Error\r\n\r\n\r\n\r\n","import { Button, Container, HStack} from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport EmailANDpassword from \"../components/emailANDpassword\";\r\nimport {useState} from 'react';\r\nimport Error from \"../components/error\";\r\n\r\ninterface signIn {\r\n    title:string,\r\n    onChange: any,\r\n}\r\n\r\n\r\nconst SignIn:React.FC<signIn> = ({title, onChange}) => {  \r\n  const [state, setstate] = useState({ email:\"\", data: {pssw: \"\",}});\r\n  const [error_, setError] = useState(0);\r\n\r\n\r\n\r\n  return (\r\n    <>    \r\n        <Title title={title}/>\r\n\r\n        \r\n        \r\n        <EmailANDpassword onChange={setstate} state={state} checkPass={false} error_={error_}/>\r\n\r\n        <Container centerContent={true} mt={'10px'}>\r\n        <HStack spacing={8}>\r\n        <Button colorScheme=\"blue\" id='submit' onClick={() => login(state, setError, onChange)}>\r\n          Log In\r\n        </Button>\r\n        \r\n        </HStack>\r\n        </Container>\r\n\r\n        <Container centerContent={true} mt={'10px'}>\r\n          <Error which={error_}/>\r\n        </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignIn;\r\n\r\nconst login = (state: any, setError: any, onChange: any) => {\r\n  \r\n  const allGood = check(state, setError);\r\n  \r\n  if (allGood) {\r\n    \r\n    localStorage.setItem('email', state.email);\r\n    onChange(Page.DashBoard);\r\n\r\n  }\r\n\r\n  \r\n}\r\n\r\nconst check = (state: any, setError: any) => {\r\n\r\n  let allGood = true;\r\n  setError(0);\r\n\r\n  if (localStorage.getItem(state.email) === null){\r\n    setError(5);\r\n    allGood = false;\r\n  }\r\n  else if (JSON.parse(localStorage.getItem(state.email) as string).pssw !== state.data.pssw){\r\n    setError(6);\r\n    allGood = false;\r\n  }\r\n\r\n\r\n  return (allGood);\r\n\r\n\r\n\r\n}","import { Input, InputGroup, InputLeftElement,} from \"@chakra-ui/react\";\r\nimport {EditIcon,} from \"@chakra-ui/icons\";\r\n\r\n\r\ninterface  newTask{\r\n    onChange?: any,\r\n    state?: any,\r\n    type:string,\r\n}\r\n\r\nconst NewTask:React.FC<newTask> = ({onChange, state, type}) => {\r\n    return (\r\n      <>  \r\n        \r\n        <InputGroup alignSelf='center' m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<EditIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"text\" id={type} placeholder={type} onChange={event => {\r\n                                        onChange(event.target.value as string);\r\n                                      }}/>\r\n        </InputGroup>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default NewTask","import {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport { Button, HStack, Container, Box } from \"@chakra-ui/react\";\r\nimport NewTask from \"../components/newTask\";\r\nimport {useState} from 'react';\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\ninterface dashboard {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst Dashboard:React.FC<dashboard> = ({title, onChange}) => {\r\n    const email = localStorage.getItem('email');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');\r\n    const [allItems, setAllItems] = useState<string[]>(Object.keys(JSON.parse(localStorage.getItem(email as string) as string).lists));    \r\n    const [addText, setAddText] = useState('add');\r\n\r\n\r\n    return (\r\n        <>    \r\n            <Title title={title}/>\r\n\r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n                                        const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                        \r\n                                        if(!(newItem in data.lists)){\r\n                                            data.list = newItem;\r\n                                            data.lists[newItem] =  [];\r\n                                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                                            const aux = [...allItems.concat([newItem])];\r\n                                            setAllItems(aux);\r\n\r\n                                            setTimeout(() => onChange(Page.List), 500);\r\n                                        }\r\n                                        \r\n\r\n                                        \r\n                                        \r\n\r\n                                        setNewItem('');\r\n                                        setTimeout(() => setNewItemField(<></>), 200);\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                      \r\n            \r\n\r\n\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new list'}/>\r\n                                                                      \r\n                                );\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new list\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New List\r\n                </Button>\r\n             \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5}>\r\n                        <DeleteIcon color=\"gray.300\" onClick={() => {\r\n\r\n                            const data = JSON.parse(localStorage.getItem(email as string) as string);\r\n                            delete data.lists[item];\r\n                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                            console.log(JSON.parse(localStorage.getItem(email as string) as string));\r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        \r\n                        <Box onClick={() => {\r\n                            const email = localStorage.getItem('email');\r\n                            const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                            data.list = item;\r\n                            \r\n                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                            setTimeout(() => onChange(Page.List), 50);\r\n                        }}\r\n                        >{`${item}`}</Box>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import { Button, HStack, Container, Box, Checkbox, } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport NewTask from \"../components/newTask\";\r\nimport {useState} from 'react';\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\ninterface list {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst List:React.FC<list> = ({title, onChange}) => {    \r\n\r\n    const email = localStorage.getItem('email');\r\n    const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n    let listNameOld = data.list;\r\n    \r\n    const [listName, setListName] = useState('');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');\r\n    const [allItems, setAllItems] = useState<string[][]>((JSON.parse(localStorage.getItem(email as string) as string).lists[listNameOld]));    \r\n    const [addText, setAddText] = useState('add');\r\n    const [option, setOption] = useState('0');\r\n\r\n    console.log([Object.keys(JSON.parse(localStorage.getItem(email as string) as string).lists[listNameOld])]);\r\n\r\n\r\n    return (\r\n        <>    \r\n        <Box ml ='73%' mt='10px' >\r\n            \r\n        <HStack spacing={3}> \r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                        setNewItemField(\r\n                                        \r\n                                        <NewTask onChange={setListName} type={'to-do list'}/>\r\n                                                                        \r\n                                    );\r\n                                    setOption('2');\r\n                                    setAddText('add');\r\n                                    setTimeout(() =>\r\n                                    (document.getElementById(\"to-do list\") as HTMLElement).focus(), 100); \r\n                    }}>\r\n                        Rename\r\n            </Button>\r\n\r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                                                        const email = localStorage.getItem('email');\r\n                                                        const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                                        data.list = '';\r\n                                                        \r\n                                                        localStorage.setItem(email as string, JSON.stringify(data));\r\n                                                        \r\n                                                        onChange(Page.DashBoard);}}>\r\n                Back\r\n            </Button> \r\n            </HStack>\r\n        </Box>\r\n\r\n\r\n            <Title title={listNameOld}/>\r\n            \r\n\r\n            \r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === '' && listName === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n\r\n                                        if(option === '1'){\r\n                                            const aux = [...allItems.concat([[newItem,'false']])];\r\n                                            setAllItems(aux);\r\n                                        }\r\n                                        if(option === '2'){\r\n                                            const email = localStorage.getItem('email');\r\n                                            const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                            \r\n                                            if(!(listName in data.lists)){\r\n                                            data.list = listName;\r\n                                            data.lists[listName] = data.lists[listNameOld];\r\n                                            delete data.lists[listNameOld];\r\n                                            \r\n                                            \r\n                                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                                            listNameOld = listName;\r\n                                            }\r\n                                        }\r\n                                        \r\n\r\n                                        setNewItem('');                                        \r\n                                        setListName('');\r\n                                        setNewItemField(<></>);\r\n                                        setOption('0');\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new item'}/>\r\n                                                                      \r\n                                );\r\n                                setOption('1');\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new item\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New Item\r\n                </Button>\r\n             \r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                                                            saveList(allItems);\r\n                                                            onChange(Page.DashBoard);\r\n                                                            \r\n                                                            }}>\r\n                Save\r\n            </Button>  \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  draggable=\"true\"  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5} >\r\n                        <DeleteIcon color=\"gray.400\" onClick={() => {\r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        <Checkbox  isChecked={item[1] === 'true'} colorScheme=\"blue\" defaultIsChecked={item[1] === 'true'} style={{borderColor : '#3182ce'}}\r\n                        onChange={() => {\r\n                            const auxCheck = [...allItems];\r\n                            auxCheck[i][1] = auxCheck[i][1] === 'true'? 'false':'true';\r\n                            setAllItems(auxCheck);\r\n                        }}> \r\n                        {`${item[0]}`}\r\n                        </Checkbox>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n              \r\n             \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default List;\r\n\r\nconst saveList = (items:any) => {\r\n    \r\n    const email = localStorage.getItem('email');\r\n    const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n    const listName = data.list;\r\n    data.lists[listName] = [];\r\n\r\n    for(let item of items){\r\n        data.lists[listName].push(item);\r\n    }\r\n    localStorage.setItem(email as string, JSON.stringify(data));\r\n    console.log(localStorage.getItem(email as string));\r\n                                        \r\n                                       \r\n\r\n}","import {Box, Button} from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\n\r\n\r\ninterface  menu{\r\n    onClick: (pag:Page) => void,\r\n    text: string,\r\n    page: Page,\r\n    visibility: string;\r\n}\r\n\r\nconst Menu:React.FC<menu> = ({onClick, text, page, visibility}) => {\r\n    \r\n    return (\r\n      <>  \r\n        \r\n        <Box ml ='90%' mt='10px' >\r\n            <Button visibility={visibility as 'visible' | 'hidden'}  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                if(text === 'Log out')\r\n                    localStorage.setItem('email', '');\r\n                onClick(page);\r\n                \r\n                }}>\r\n                {text}\r\n            </Button> \r\n        </Box>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Menu","import {Page} from  \"./dataStructure/page\";\nimport FirstPage from \"./pages/firstPage\";\nimport SignUp from \"./pages/sign_up\";\nimport SignIn from \"./pages/signIn\";\nimport Dashboard from \"./pages/dash_board\";\nimport List from \"./pages/list\";\nimport Menu from \"./components/menu\";\nimport {useState} from 'react';\nimport { Container} from \"@chakra-ui/react\";\n\ninterface app {\n  whichPage: Page,\n}\n\nconst App:React.FC<app> = ({whichPage}) => {\n  const [state, setstate] = useState(whichPage);\n\n  let currentPage = <> </>;\n  let menu =   <Menu onClick={setstate} visibility={'visible'}  text='Back' page={Page.FirstPage}/>;\n  \n\n\n  if(state === Page.FirstPage){\n    menu = <Menu onClick={setstate} visibility={'hidden'}  text='Back' page={Page.FirstPage}/>;\n    currentPage = <FirstPage title='To-Do List' onChange={setstate} />\n  }\n  else if(state === Page.SignUp)\n    currentPage = <SignUp changePage={setstate}/>\n  else if(state === Page.SignIn)\n    currentPage = <SignIn title='Sign In' onChange={setstate}/>\n  else if(state === Page.DashBoard){\n    menu =    <Menu onClick={setstate} visibility={'visible'}  text='Log out' page={Page.FirstPage}/>;\n    currentPage = <Dashboard title='Dashboard' onChange={setstate}/>\n  }\n  else if(state === Page.List){\n    menu = <> </>;\n    currentPage = <List title='List' onChange={setstate}/>\n  }\n  return (\n      <> \n          <Container centerContent={true} >\n            {menu}\n            {currentPage}\n          </Container>\n      </>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider} from \"@chakra-ui/react\";\nimport {Page} from  \"./dataStructure/page\";\n\n\nlet whichPage = Page.FirstPage;\n\n\n//localStorage.clear();\n\nif (!localStorage.getItem('email'))    \n        localStorage.setItem('email', '');\n    else if (localStorage.getItem('email') !== '') {\n        whichPage = Page.DashBoard;\n    }\n\n\n\nReactDOM.render(\n  <>\n  \n  <ChakraProvider>\n  <React.StrictMode>\n    <App whichPage={whichPage}/>\n  </React.StrictMode>\n  </ChakraProvider>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}