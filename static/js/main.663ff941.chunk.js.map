{"version":3,"sources":["dataStructure/page.tsx","components/title.tsx","pages/firstPage.tsx","components/emailANDpassword.tsx","dataStructure/user.tsx","components/error.tsx","pages/signUp.tsx","pages/signIn.tsx","components/newTask.tsx","pages/dash_board.tsx","pages/list.tsx","components/menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","Title","title","color","fontSize","id","mb","FirstPage","onChange","buttons","SignUp","SignIn","centerContent","spacing","map","b","i","colorScheme","onClick","EmailANDpassword","state","checkF","setErrorF","checkPass","error_","isInvalid","m","pointerEvents","children","AtSign","type","placeholder","event","user","email","target","value","Lock","pw","document","querySelector","removeEventListener","enter","addEventListener","data","pssw","e","key","clearTimeout","setTimeout","getElementById","focus","CreateUser","fName","lName","Error","message","which","useState","setstate","setError","errorNum","name","check","mt","submit","lists","list","localStorage","setItem","JSON","stringify","DashBoard","allGood","fName_empty","length","split","lName_empty","email_empty","emptyError","getItem","login","parse","NewTask","alignSelf","Edit","Dashboard","newItemField","setNewItemField","newItem","setNewItem","Object","keys","allItems","setAllItems","addText","setAddText","visibility","aux","concat","List","style","width","backgroundColor","borderRadius","item","margin","Delete","console","log","aux1","slice","aux2","listNameOld","listName","setListName","option","setOption","ml","size","saveList","draggable","isChecked","defaultIsChecked","borderColor","auxCheck","items","push","Menu","text","page","App","whichPage","currentPage","menu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.663ff941.chunk.js","sourcesContent":["export enum Page {\r\n    FirstPage = \"First Page\",\r\n    SignUp = \"Sign Up\",\r\n    SignIn = \"Sign In\",\r\n    DashBoard = \"Dashboard\",\r\n    List = \"List\",\r\n}","import {Box} from \"@chakra-ui/react\";\r\n\r\ninterface title {\r\n    title:string,\r\n}\r\nconst Title:React.FC<title> = ({title}) => {\r\n  return (\r\n    <>    \r\n        <Box color='#3182ce' fontSize=\"40px\" id={title} mb={'20px'}>\r\n          {title}\r\n        </Box>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default Title;","import { Button, HStack, Container } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\n\r\ninterface firstPage {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst FirstPage:React.FC<firstPage> = ({title, onChange}) => {\r\n    const buttons = [Page.SignUp, Page.SignIn];\r\n\r\n    \r\n\r\n    return (\r\n        <>  \r\n            <Title title={title}/>\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n            {buttons.map((b, i) => \r\n                <Button key={i} colorScheme=\"blue\" onClick={() => onChange(b)}>\r\n                    {b}\r\n                </Button>)}            \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FirstPage;","import { Input, InputGroup, InputLeftElement,\r\n    FormControl,} from \"@chakra-ui/react\";\r\nimport {AtSignIcon, LockIcon} from \"@chakra-ui/icons\";\r\n\r\n\r\ninterface  emailANDpassword{\r\n    onChange: any,\r\n    checkF?: any,\r\n    setErrorF?: any,\r\n    error_?: number,\r\n    state: any,\r\n    checkPass: boolean,\r\n}\r\n\r\nconst EmailANDpassword:React.FC<emailANDpassword> = ({onChange, state, checkF, setErrorF, checkPass, error_}) => {\r\n    return (\r\n      <>  \r\n        <FormControl  isInvalid={(error_ !== 0 && error_ as number%13 === 0) || error_ === 1 || error_ ===4 || error_ ===5}>            \r\n        \r\n        <InputGroup m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<AtSignIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"email\" id=\"email\" placeholder=\"e-mail\" onChange={event => {\r\n                                        let user = state;\r\n                                        user.email = event.target.value as string;\r\n                                        onChange(user);\r\n                                        \r\n                                      }}/>\r\n        </InputGroup>\r\n        </FormControl>  \r\n\r\n        <FormControl   isInvalid={error_ === 2 || error_ === 6}>            \r\n        \r\n        <InputGroup m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<LockIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"password\" id=\"password\" placeholder=\"password\" onChange={event => {\r\n                                        const pw = document.querySelector('#password') as Element;\r\n                                        pw.removeEventListener('keypress', enter);\r\n                                        pw.addEventListener('keypress', enter);\r\n                                        let user = state;\r\n                                        user.data.pssw = event.target.value as string;\r\n                                        onChange(user);\r\n                                        if(checkPass)\r\n                                            checkF(user, setErrorF);\r\n                                      }}/>\r\n        </InputGroup>\r\n        </FormControl>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default EmailANDpassword\r\n\r\nconst enter = (e:Event) => {\r\n  \r\n    if((e as KeyboardEvent).key === 'Enter'){\r\n    clearTimeout();\r\n    setTimeout(() => {\r\n        if (document.getElementById(\"submit\") !== null)\r\n            (document.getElementById(\"submit\") as HTMLElement).focus();\r\n    }\r\n    \r\n    , 100); \r\n    }\r\n  \r\n    \r\n  }","interface createUser {\r\n    email: string | undefined,\r\n    fName: string | undefined,\r\n    lName: string | undefined,\r\n    pssw:  string | undefined,\r\n};\r\n \r\n const CreateUser = ({email, fName, lName, pssw}: createUser) =>{\r\n    return ({email,\r\n            data : {fName, lName, pssw,},\r\n        })\r\n }\r\n\r\n export default CreateUser;\r\n","import { Box} from \"@chakra-ui/react\";\r\n\r\n\r\ninterface  errorInterface{\r\n    which: number,\r\n}\r\n\r\nconst Error : React.FC<errorInterface> = ({which}) => {\r\n    let message;\r\n    switch(which) {\r\n        case 1: message = 'This email is already linked to an account';\r\n            break;\r\n        case 2: message = 'The password must have at least 8 characters.';\r\n            break;\r\n        case 7: case 11: case 13: case 7*11: case 11*13: case 13*7: case 7*11*13:\r\n            message = 'All fields are mandatory!';\r\n            break;\r\n        case 4: message = \"That's not a valid email address.\";\r\n            break;\r\n        case 5: message = \"This email is not linked to any account. Please, try again.\";\r\n            break;\r\n        case 6: message = \"The password does not match. Please, try again.\";\r\n            break;\r\n        default: message = '';\r\n    }\r\n    \r\n    return (\r\n    <Box color='red'>  \r\n        {message}\r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default Error\r\n\r\n\r\n\r\n","import {  Button, \r\n          Input,\r\n          InputGroup, \r\n          InputLeftElement, \r\n          Container, \r\n          HStack,\r\n          FormControl,\r\n          } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport EmailANDpassword from \"../components/emailANDpassword\";\r\nimport CreateUser from \"../dataStructure/user\";\r\nimport {useState} from 'react';\r\nimport Error from \"../components/error\";\r\n\r\ninterface signUp {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst SignUp:React.FC<signUp> = ({title, onChange}) => {\r\n    const [state, setstate] = useState(CreateUser({ email:\"\", fName:\"\", lName:\"\",pssw: \"\",}));\r\n    const [error_, setError] = useState(0);\r\n    const name = [\"First Name\", \"Last Name\"];\r\n    const key = ['fName' , 'lName'];\r\n    const errorNum = [7 , 11];\r\n\r\n    //localStorage.clear();\r\n\r\n  return (\r\n    <>    \r\n        <Title title={title}/>\r\n        \r\n\r\n        {name.map((name, i) => \r\n          <FormControl  isInvalid={error_ !== 0 && error_%errorNum[i] === 0} key={i}>     \r\n            <InputGroup m={'5px'} >\r\n                <InputLeftElement\r\n                pointerEvents=\"none\"\r\n                />\r\n                <Input type=\"text\" id={name} placeholder={name} onChange={event => {\r\n                                        let user = state;\r\n                                        user.data[key[i] as 'fName' | 'lName'] = event.target.value as string;\r\n                                        setstate(user);\r\n                                      }}/>\r\n            </InputGroup>            \r\n          </FormControl>\r\n\r\n        )}\r\n        \r\n        \r\n        <EmailANDpassword onChange={setstate} state={state} checkF={check} setErrorF={setError} checkPass={true} error_={error_}/>\r\n\r\n          \r\n        <Container centerContent={true} mt={'10px'}>\r\n        <HStack spacing={8}>\r\n        \r\n        <Button colorScheme=\"blue\" id='submit' onClick={() => submit(state, setError, onChange)}>\r\n          Submit\r\n        </Button>\r\n        \r\n        </HStack>\r\n        </Container>\r\n\r\n        <Container centerContent={true} mt={'10px'}>\r\n          <Error which={error_}/>\r\n        </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n\r\nconst submit = (state: any, setError: any, onChange: any) => {\r\n  \r\n  const allGood = check(state, setError);\r\n  \r\n  if (allGood) {\r\n    state.data.lists = {};   \r\n    state.data.list = '';\r\n    localStorage.setItem(state.email, JSON.stringify(state.data));\r\n    localStorage.setItem('email', state.email);\r\n    onChange(Page.DashBoard);\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nconst check = (state: any, setError: any) => {\r\n\r\n  let allGood = true;\r\n  setError(0);\r\n\r\n  const fName_empty = state.data.fName.length - (state.data.fName.split(' ').length-1)  === 0;\r\n  const lName_empty = state.data.lName.length - (state.data.lName.split(' ').length-1)  === 0;\r\n  const email_empty = state.email.length      - (state.email.split(' ').length-1)       === 0;\r\n  let emptyError = 1;\r\n\r\n  if (fName_empty || lName_empty || email_empty){\r\n    emptyError = fName_empty? emptyError*7:emptyError;\r\n    emptyError = lName_empty? emptyError*11:emptyError;\r\n    emptyError = email_empty? emptyError*13:emptyError;\r\n    setError(emptyError);\r\n    allGood = false;\r\n  }\r\n  else if (localStorage.getItem(state.email) != null){\r\n    setError(1);\r\n    allGood = false;\r\n  }\r\n  else if (state.email.split('@').length < 2){\r\n    setError(4);\r\n    allGood = false;\r\n  }\r\n  else if (state.data.pssw.length < 8){\r\n    setError(2);\r\n    allGood = false;\r\n  }\r\n\r\n\r\n  return (allGood);\r\n\r\n\r\n\r\n}","import { Button, Container, HStack} from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport EmailANDpassword from \"../components/emailANDpassword\";\r\nimport {useState} from 'react';\r\nimport Error from \"../components/error\";\r\n\r\ninterface signIn {\r\n    title:string,\r\n    onChange: any,\r\n}\r\n\r\n\r\nconst SignIn:React.FC<signIn> = ({title, onChange}) => {  \r\n  const [state, setstate] = useState({ email:\"\", data: {pssw: \"\",}});\r\n  const [error_, setError] = useState(0);\r\n\r\n\r\n\r\n  return (\r\n    <>    \r\n        <Title title={title}/>\r\n\r\n        \r\n        \r\n        <EmailANDpassword onChange={setstate} state={state} checkPass={false} error_={error_}/>\r\n\r\n        <Container centerContent={true} mt={'10px'}>\r\n        <HStack spacing={8}>\r\n        <Button colorScheme=\"blue\" id='submit' onClick={() => login(state, setError, onChange)}>\r\n          Log In\r\n        </Button>\r\n        \r\n        </HStack>\r\n        </Container>\r\n\r\n        <Container centerContent={true} mt={'10px'}>\r\n          <Error which={error_}/>\r\n        </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignIn;\r\n\r\nconst login = (state: any, setError: any, onChange: any) => {\r\n  \r\n  const allGood = check(state, setError);\r\n  \r\n  if (allGood) {\r\n    \r\n    localStorage.setItem('email', state.email);\r\n    onChange(Page.DashBoard);\r\n\r\n  }\r\n\r\n  \r\n}\r\n\r\nconst check = (state: any, setError: any) => {\r\n\r\n  let allGood = true;\r\n  setError(0);\r\n\r\n  if (localStorage.getItem(state.email) === null){\r\n    setError(5);\r\n    allGood = false;\r\n  }\r\n  else if (JSON.parse(localStorage.getItem(state.email) as string).pssw !== state.data.pssw){\r\n    setError(6);\r\n    allGood = false;\r\n  }\r\n\r\n\r\n  return (allGood);\r\n\r\n\r\n\r\n}","import { Input, InputGroup, InputLeftElement,} from \"@chakra-ui/react\";\r\nimport {EditIcon,} from \"@chakra-ui/icons\";\r\n\r\n\r\ninterface  newTask{\r\n    onChange?: any,\r\n    state?: any,\r\n    type:string,\r\n}\r\n\r\nconst NewTask:React.FC<newTask> = ({onChange, state, type}) => {\r\n    return (\r\n      <>  \r\n        \r\n        <InputGroup alignSelf='center' m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<EditIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"text\" id={type} placeholder={type} onChange={event => {\r\n                                        onChange(event.target.value as string);\r\n                                      }}/>\r\n        </InputGroup>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default NewTask","import {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport { Button, HStack, Container, Box } from \"@chakra-ui/react\";\r\nimport NewTask from \"../components/newTask\";\r\nimport {useState} from 'react';\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\ninterface dashboard {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst Dashboard:React.FC<dashboard> = ({title, onChange}) => {\r\n    const email = localStorage.getItem('email');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');\r\n    const [allItems, setAllItems] = useState<string[]>(Object.keys(JSON.parse(localStorage.getItem(email as string) as string).lists));    \r\n    const [addText, setAddText] = useState('add');\r\n\r\n\r\n    return (\r\n        <>    \r\n            <Title title={title}/>\r\n\r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n                                        const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                        \r\n                                        if(!(newItem in data.lists)){\r\n                                            data.list = newItem;\r\n                                            data.lists[newItem] =  [];\r\n                                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                                            const aux = [...allItems.concat([newItem])];\r\n                                            setAllItems(aux);\r\n\r\n                                            setTimeout(() => onChange(Page.List), 500);\r\n                                        }\r\n                                        \r\n\r\n                                        \r\n                                        \r\n\r\n                                        setNewItem('');\r\n                                        setTimeout(() => setNewItemField(<></>), 200);\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                      \r\n            \r\n\r\n\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new list'}/>\r\n                                                                      \r\n                                );\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new list\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New List\r\n                </Button>\r\n             \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5}>\r\n                        <DeleteIcon color=\"gray.300\" onClick={() => {\r\n\r\n                            const data = JSON.parse(localStorage.getItem(email as string) as string);\r\n                            delete data.lists[item];\r\n                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                            console.log(JSON.parse(localStorage.getItem(email as string) as string));\r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        \r\n                        <Box onClick={() => {\r\n                            const email = localStorage.getItem('email');\r\n                            const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                            data.list = item;\r\n                            \r\n                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                            setTimeout(() => onChange(Page.List), 50);\r\n                        }}\r\n                        >{`${item}`}</Box>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import { Button, HStack, Container, Box, Checkbox, } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport Title from  \"../components/title\";\r\nimport NewTask from \"../components/newTask\";\r\nimport {useState} from 'react';\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\ninterface list {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst List:React.FC<list> = ({title, onChange}) => {    \r\n\r\n    const email = localStorage.getItem('email');\r\n    const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n    let listNameOld = data.list;\r\n    \r\n    const [listName, setListName] = useState('');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');\r\n    const [allItems, setAllItems] = useState<string[][]>((JSON.parse(localStorage.getItem(email as string) as string).lists[listNameOld]));    \r\n    const [addText, setAddText] = useState('add');\r\n    const [option, setOption] = useState('0');\r\n\r\n    console.log([Object.keys(JSON.parse(localStorage.getItem(email as string) as string).lists[listNameOld])]);\r\n\r\n\r\n    return (\r\n        <>    \r\n        <Box ml ='73%' mt='10px' >\r\n            \r\n        <HStack spacing={3}> \r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                        setNewItemField(\r\n                                        \r\n                                        <NewTask onChange={setListName} type={'to-do list'}/>\r\n                                                                        \r\n                                    );\r\n                                    setOption('2');\r\n                                    setAddText('add');\r\n                                    setTimeout(() =>\r\n                                    (document.getElementById(\"to-do list\") as HTMLElement).focus(), 100); \r\n                    }}>\r\n                        Rename\r\n            </Button>\r\n\r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                                                        const email = localStorage.getItem('email');\r\n                                                        const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                                        data.list = '';\r\n                                                        \r\n                                                        localStorage.setItem(email as string, JSON.stringify(data));\r\n                                                        \r\n                                                        onChange(Page.DashBoard);}}>\r\n                Back\r\n            </Button> \r\n            </HStack>\r\n        </Box>\r\n\r\n\r\n            <Title title={listNameOld}/>\r\n            \r\n\r\n            \r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === '' && listName === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n\r\n                                        if(option === '1'){\r\n                                            const aux = [...allItems.concat([[newItem,'false']])];\r\n                                            setAllItems(aux);\r\n                                        }\r\n                                        if(option === '2'){\r\n                                            const email = localStorage.getItem('email');\r\n                                            const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                            \r\n                                            if(!(listName in data.lists)){\r\n                                            data.list = listName;\r\n                                            data.lists[listName] = data.lists[listNameOld];\r\n                                            delete data.lists[listNameOld];\r\n                                            \r\n                                            \r\n                                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                                            listNameOld = listName;\r\n                                            }\r\n                                        }\r\n                                        \r\n\r\n                                        setNewItem('');                                        \r\n                                        setListName('');\r\n                                        setNewItemField(<></>);\r\n                                        setOption('0');\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new item'}/>\r\n                                                                      \r\n                                );\r\n                                setOption('1');\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new item\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New Item\r\n                </Button>\r\n             \r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                                                            saveList(allItems);\r\n                                                            onChange(Page.DashBoard);\r\n                                                            \r\n                                                            }}>\r\n                Save\r\n            </Button>  \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  draggable=\"true\"  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5} >\r\n                        <DeleteIcon color=\"gray.400\" onClick={() => {\r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        <Checkbox  isChecked={item[1] === 'true'} colorScheme=\"blue\" defaultIsChecked={item[1] === 'true'} style={{borderColor : '#3182ce'}}\r\n                        onChange={() => {\r\n                            const auxCheck = [...allItems];\r\n                            auxCheck[i][1] = auxCheck[i][1] === 'true'? 'false':'true';\r\n                            setAllItems(auxCheck);\r\n                        }}> \r\n                        {`${item[0]}`}\r\n                        </Checkbox>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n              \r\n             \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default List;\r\n\r\nconst saveList = (items:any) => {\r\n    \r\n    const email = localStorage.getItem('email');\r\n    const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n    const listName = data.list;\r\n    data.lists[listName] = [];\r\n\r\n    for(let item of items){\r\n        data.lists[listName].push(item);\r\n    }\r\n    localStorage.setItem(email as string, JSON.stringify(data));\r\n    console.log(localStorage.getItem(email as string));\r\n                                        \r\n                                       \r\n\r\n}","import {Box, Button} from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\n\r\n\r\ninterface  menu{\r\n    onClick: (pag:Page) => void,\r\n    text: string,\r\n    page: Page,\r\n    visibility: string;\r\n}\r\n\r\nconst Menu:React.FC<menu> = ({onClick, text, page, visibility}) => {\r\n    \r\n    return (\r\n      <>  \r\n        \r\n        <Box ml ='90%' mt='10px' >\r\n            <Button visibility={visibility as 'visible' | 'hidden'}  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                if(text === 'Log out')\r\n                    localStorage.setItem('email', '');\r\n                onClick(page);\r\n                \r\n                }}>\r\n                {text}\r\n            </Button> \r\n        </Box>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Menu","import {Page} from  \"./dataStructure/page\";\nimport FirstPage from \"./pages/firstPage\";\nimport SignUp from \"./pages/signUp\";\nimport SignIn from \"./pages/signIn\";\nimport Dashboard from \"./pages/dash_board\";\nimport List from \"./pages/list\";\nimport Menu from \"./components/menu\";\nimport {useState} from 'react';\nimport { Container} from \"@chakra-ui/react\";\n\ninterface app {\n  whichPage: Page,\n}\n\nconst App:React.FC<app> = ({whichPage}) => {\n  const [state, setstate] = useState(whichPage);\n\n  let currentPage = <> </>;\n  let menu =   <Menu onClick={setstate} visibility={'visible'}  text='Back' page={Page.FirstPage}/>;\n  \n\n\n  if(state === Page.FirstPage){\n    menu = <Menu onClick={setstate} visibility={'hidden'}  text='Back' page={Page.FirstPage}/>;\n    currentPage = <FirstPage title='To-Do List' onChange={setstate} />\n  }\n  else if(state === Page.SignUp)\n    currentPage = <SignUp title='Sign Up' onChange={setstate}/>\n  else if(state === Page.SignIn)\n    currentPage = <SignIn title='Sign In' onChange={setstate}/>\n  else if(state === Page.DashBoard){\n    menu =    <Menu onClick={setstate} visibility={'visible'}  text='Log out' page={Page.FirstPage}/>;\n    currentPage = <Dashboard title='Dashboard' onChange={setstate}/>\n  }\n  else if(state === Page.List){\n    menu = <> </>;\n    currentPage = <List title='List' onChange={setstate}/>\n  }\n  return (\n      <> \n          <Container centerContent={true} >\n            {menu}\n            {currentPage}\n          </Container>\n      </>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider} from \"@chakra-ui/react\";\nimport {Page} from  \"./dataStructure/page\";\n\n\nlet whichPage = Page.FirstPage;\n\n\n//localStorage.clear();\n\nif (!localStorage.getItem('email'))    \n        localStorage.setItem('email', '');\n    else if (localStorage.getItem('email') !== '') {\n        whichPage = Page.DashBoard;\n    }\n\n\n\nReactDOM.render(\n  <>\n  \n  <ChakraProvider>\n  <React.StrictMode>\n    <App whichPage={whichPage}/>\n  </React.StrictMode>\n  </ChakraProvider>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}